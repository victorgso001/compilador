<bool-lit> ::=
 
	true 

	| false

<comando> ::= 

	(  <id> ("[" <expressão> "]")* :=  <expressão>  )
 
	|  <condicional>
 
	|  <iterativo>
 
	|  <comando-composto>
	

<comando-composto> ::=
 
	begin <lista-de-comandos> end

<condicional> ::= 

	if <expressão> then <comando> ( else <comando> | ε )

<corpo> ::=
 
	<declarações> begin <lista-de-comandos> end

<declarações> ::=
 
	(  var <lista-de-ids> : <tipo> ;  )*

<digito> ::=
 
	0 

	| 1
 
	| 2
 
	| ...

	| 9

<expressão> ::=	
	
	(<expressão-simples>) ( (<op-rel> <expressão-simples>) | ε )

<expressão-simples> ::= <termo> (op-ad> <termo>)*

<fator> ::=
 
	<id> ("[" <expressão> "]")*
 
	| <literal> 
 
	| "(" <expressão> ")" 

<float-lit> ::= 

	<int-lit> . <int-lit>
 
	| <int-lit> .
 
	| . <int-lit>

<id> ::= 

	<letra>
 
	| <id> <letra>
 
	| <id> <digito>

<int-lit> ::=
 
	<digito>
 
	| <int-lit> <digito>

<iterativo> ::=
 
	while <expressão> do <comando>

<letra> ::=
 
	a
 
	| b
 
	| c
 
	| ...
 
	| z

<lista-de-comandos> ::= (<comando> ;)* 

<lista-de-ids> ::= <id>( , <id> )*  

<literal> ::=
 
	<bool-lit>
 
	| <int-lit>
 
	| <float-lit> 

<op-ad> ::=
 
	+
 
	| -
 
	| or

<op-mul> ::=
 
	*
 
	| /
 
	| and

<op-rel> ::=
 
	<
 
	| >
 
	| <=
 
	| >=
 
	| =
 
	| <>

<outros> ::=
 
	!
 
	| @
 
	| #
 
	| ...

<programa> ::=
 
	program <id> ; <corpo> .

<seletor> ::= ("[" <expressão> "]")*

<termo> ::= <fator>(<op-mul> <fator>)*

<tipo> ::=
 
	<tipo-agregado>
 
	| <tipo-simples>

<tipo-agregado> ::=
 
	array [ <literal> .. <literal> ] of <tipo>

<tipo-simples> ::=
 
	integer
 
	| real
 
	| boolean